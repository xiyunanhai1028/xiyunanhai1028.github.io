<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>rxjava总结</title>
      <link href="/2019/08/26/rxjava-zong-jie/"/>
      <url>/2019/08/26/rxjava-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><pre class=" language-java"><code class="language-java">implementation <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span>implementation <span class="token string">'io.reactivex.rxjava2:rxjava:2.2.12'</span></code></pre><h3 id="三个重要的知识点"><a href="#三个重要的知识点" class="headerlink" title="三个重要的知识点"></a>三个重要的知识点</h3><blockquote><p>Observable：被观察者，可以理解为事件的发送者</p><p>Observer：观察者，可以理解为事件的接收者</p><p>Subscriber：订阅，可以理解为链接发送者跟接收者</p></blockquote><pre class=" language-java"><code class="language-java">Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> ob <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Observable"</span><span class="token punctuation">,</span> <span class="token string">"subscribe: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"嗨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"observer"</span><span class="token punctuation">,</span> <span class="token string">"onSubscribe: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"observer"</span><span class="token punctuation">,</span> <span class="token string">"onNext: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"observer"</span><span class="token punctuation">,</span> <span class="token string">"onError: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"observer"</span><span class="token punctuation">,</span> <span class="token string">"onComplete: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ob<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码干了三件事情，</p><ul><li><ol><li>创建了Observable被观察者(发送者)对象，</li><li>创建Observer(接收者)对象，</li><li>然后通过subscribe将他们关联起来</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">42.399</span> <span class="token number">2352</span><span class="token operator">-</span><span class="token number">2352</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>observer<span class="token operator">:</span> onSubscribe<span class="token operator">:</span> <span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">42.399</span> <span class="token number">2352</span><span class="token operator">-</span><span class="token number">2352</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>Observable<span class="token operator">:</span> subscribe<span class="token operator">:</span> <span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">42.399</span> <span class="token number">2352</span><span class="token operator">-</span><span class="token number">2352</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>observer<span class="token operator">:</span> onNext<span class="token operator">:</span> hi<span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">42.399</span> <span class="token number">2352</span><span class="token operator">-</span><span class="token number">2352</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>observer<span class="token operator">:</span> onComplete<span class="token operator">:</span> </code></pre><p>分析日志</p><ul><li><ol><li>被观察者调用subscribe()方法，相当于被观察说我想跟你关联了，然后观察者通过onSubscribe()回复被观察说行,然后两者就建立了连接</li><li>接着被观察者（发送者）通过onNext()发送数据</li><li>观察者（接收者）通过onNext()方法接收发送者发送过来的数据</li><li>在被观察者调用onComplete()方法时，代表已完成，观察者接着会调用onComplete()将两者之间的连接断开，所以后面的emitter.onNext(“嗨”);这句代码并没有被接收</li></ol></li></ul><blockquote><p>这里我们看到还有一个onError()方法没有被调用，关于onError()跟onComplete()是一对互斥的方法，也就是说当代码执行了onComplete()方法，那么onError()方法就不可能被调用，反之也一样，这里就不代码演示了</p></blockquote><h3 id="Observable几种创建方式"><a href="#Observable几种创建方式" class="headerlink" title="Observable几种创建方式"></a>Observable几种创建方式</h3><blockquote><p>just(T…)：将传入的数据依次发送出去</p><p>fromArray(T… items) 将传入的数组或 <code>Iterable</code> 拆分成具体对象后，依次发送出来：</p></blockquote><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"onSubscribe"</span><span class="token punctuation">,</span> <span class="token string">"onNext: "</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">38.019</span> <span class="token number">2637</span><span class="token operator">-</span><span class="token number">2637</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 张三<span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">38.019</span> <span class="token number">2637</span><span class="token operator">-</span><span class="token number">2637</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 李四<span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">38.019</span> <span class="token number">2637</span><span class="token operator">-</span><span class="token number">2637</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 王五</code></pre><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"onSubscribe"</span><span class="token punctuation">,</span> <span class="token string">"onNext: "</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">47.819</span> <span class="token number">2710</span><span class="token operator">-</span><span class="token number">2710</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 张三<span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">47.819</span> <span class="token number">2710</span><span class="token operator">-</span><span class="token number">2710</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 李四<span class="token number">08</span><span class="token operator">-</span><span class="token number">25</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">47.819</span> <span class="token number">2710</span><span class="token operator">-</span><span class="token number">2710</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>onSubscribe<span class="token operator">:</span> onNext<span class="token operator">:</span> 王五</code></pre><h3 id="Consumer-amp-Action"><a href="#Consumer-amp-Action" class="headerlink" title="Consumer&amp;Action"></a>Consumer&amp;Action</h3><blockquote><p><code>Consumer</code>是Rxjava的一个接口，他只有一个方法<code>accept(T t)</code>方法，这个方法无返回值，但有一个参数， 由于<code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的,因此Consumer可以被当着包装对象,当着onNext和onError来使用</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>Action也是Rxjava的一个接口，他只有一个方法run，无参数，无返回值，由于onComplete()也是无参无返回值，所以Action可以被当着包装对象，当着onComplete来势</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例代码：</p><pre class=" language-java"><code class="language-java"> Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Action onComplete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> onNext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"onNext"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Consumer<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> onError <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>onNext<span class="token punctuation">,</span> onError<span class="token punctuation">,</span> onComplete<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>往往我们在写代码中只关注onNext方法，所以上面复杂的代码可以简化：</p><pre class=" language-java"><code class="language-java"> String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">03.139</span> <span class="token number">3410</span><span class="token operator">-</span><span class="token number">3410</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>accept<span class="token operator">:</span> accept<span class="token operator">:</span> 张三<span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">03.139</span> <span class="token number">3410</span><span class="token operator">-</span><span class="token number">3410</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>accept<span class="token operator">:</span> accept<span class="token operator">:</span> 李四<span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">03.139</span> <span class="token number">3410</span><span class="token operator">-</span><span class="token number">3410</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>accept<span class="token operator">:</span> accept<span class="token operator">:</span> 王五</code></pre><h3 id="线程控制–Scheduler"><a href="#线程控制–Scheduler" class="headerlink" title="线程控制–Scheduler"></a>线程控制–Scheduler</h3><blockquote><p>在不指定线程的情况下，Rxjava在那个线程subscribe()就在那个线程产生事件，在那个线程产生事件，就在那个线程消费事件，如果需要线程切换，就需要用的Scheduler(调度器)</p></blockquote><p>Rxjava内置的几种Scheduler</p><ul><li>Scheduler.immediate()：默认情况下的值，相当于当前线程</li><li>Scheduler.newThread()：开启一个新的线程</li><li>Scheduler.io()：I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 <code>Scheduler</code>。行为模式和 <code>newThread()</code> 差不多，区别在于 <code>io()</code> 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 <code>io()</code> 比 <code>newThread()</code> 更有效率。不要把计算工作放在 <code>io()</code> 中，可以避免创建不必要的线程</li><li>Scheduler.computation()：计算所使用的 <code>Scheduler</code>。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 <code>Scheduler</code> 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 <code>computation()</code> 中，否则 I/O 操作的等待时间会浪费 CPU</li><li>AndroidScheduler.mainThread()：指定的操作将在主线程进行</li></ul><p>通常情况下，我们一般发送一个请求，然后等待后台反馈，等反馈回来后我们在讲反馈回来的数据进行显示，这是我们平时最常见的操作，那么用rxjava怎么实现呢</p><pre class=" language-java"><code class="language-java"> Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"subscribe: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">20.559</span> <span class="token number">3749</span><span class="token operator">-</span><span class="token number">3773</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> subscribe<span class="token operator">:</span> RxNewThreadScheduler<span class="token operator">-</span><span class="token number">1</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">20.569</span> <span class="token number">3749</span><span class="token operator">-</span><span class="token number">3749</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> accept<span class="token operator">:</span> main<span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">20.569</span> <span class="token number">3749</span><span class="token operator">-</span><span class="token number">3749</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> accept<span class="token operator">:</span> <span class="token number">111</span></code></pre><p>日志分析：可以看到Observable在一个新的线程发送事件，Consumer在主线程接收事件</p><blockquote><p>subscribeOn()：指定发送事件所在的线程</p><p>observeOn()：指定接收事件所在的线程</p></blockquote><p>==注意：==</p><blockquote><p>多次指定subscribeOn()方法，只有第一次的有效</p><p>多次指定observeOn()方法，每次都有效</p></blockquote><pre class=" language-java"><code class="language-java"> Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"subscribe: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"scheduler"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">31.459</span> <span class="token number">3867</span><span class="token operator">-</span><span class="token number">3895</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> subscribe<span class="token operator">:</span> RxNewThreadScheduler<span class="token operator">-</span><span class="token number">1</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">31.469</span> <span class="token number">3867</span><span class="token operator">-</span><span class="token number">3896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> accept<span class="token operator">:</span> RxNewThreadScheduler<span class="token operator">-</span><span class="token number">2</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">31.469</span> <span class="token number">3867</span><span class="token operator">-</span><span class="token number">3896</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>scheduler<span class="token operator">:</span> accept<span class="token operator">:</span> <span class="token number">111</span></code></pre><p>日志分析：</p><p>我们可以看到两次调用subscribeOn()方法，但是日志显示还是在新的线程执行，所以只有第一次的有效，两次调用observeOn()方法，显示在主线程，再是在新线程，所以最后执行实在新线程，日志也是如此</p><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><blockquote><p>所谓的变换，是将事件序列中的对象或者整个事件序列进行加工处理，转换成不同的事件对象或者事件序列</p></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map():"></a>Map():</h4><p>将传入的数据进行加工，返回加工后的数据，map是一对一转换的</p><pre class=" language-java"><code class="language-java">Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">apply</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面的例子，我们传入了一个整形的值，然后通过map方法，将整形的值转换为字符串返回</p><h4 id="fromArray"><a href="#fromArray" class="headerlink" title="fromArray():"></a>fromArray():</h4><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"accept"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="filter"><a href="#filter" class="headerlink" title="filter():"></a>filter():</h4><blockquote><p>对数组进行过滤，返回新的数组</p></blockquote><pre class=" language-java"><code class="language-java"> Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Observable<span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> integer <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer integer<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">20.499</span> <span class="token number">4364</span><span class="token operator">-</span><span class="token number">4364</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>filter<span class="token operator">:</span> accept<span class="token operator">:</span> <span class="token number">6</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">20.499</span> <span class="token number">4364</span><span class="token operator">-</span><span class="token number">4364</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>filter<span class="token operator">:</span> accept<span class="token operator">:</span> <span class="token number">7</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">26</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">20.499</span> <span class="token number">4364</span><span class="token operator">-</span><span class="token number">4364</span><span class="token operator">/</span>com<span class="token punctuation">.</span>rxandroid D<span class="token operator">/</span>filter<span class="token operator">:</span> accept<span class="token operator">:</span> <span class="token number">8</span></code></pre><h4 id="take"><a href="#take" class="headerlink" title="take():"></a>take():</h4><blockquote><p>保留事件数</p></blockquote><pre class=" language-java"><code class="language-java"> Observable<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"take"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-log"><code class="language-log">08-26 02:34:55.559 4539-4539/com.rxandroid D/take: accept: 108-26 02:34:55.559 4539-4539/com.rxandroid D/take: accept: 2</code></pre><h4 id="doOnNext"><a href="#doOnNext" class="headerlink" title="doOnNext():"></a>doOnNext():</h4><blockquote><p>在处理事件之前做一些工作，可以放在这个方法中</p></blockquote><h4 id="zip"><a href="#zip" class="headerlink" title="zip():"></a>zip():</h4><blockquote><p>zip通过一个函数将多个Observable发送的事件结合到一起，然后发送这些组合到一起的事件. 它按照严格的顺序应用这个函数。它只发射与发射数据项最少的那个Observable一样多的数据</p></blockquote><pre class=" language-java"><code class="language-java">Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> ob1 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observable<span class="token operator">&lt;</span>String<span class="token operator">></span> ob2 <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>String<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observable<span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>ob1<span class="token punctuation">,</span> ob2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">apply</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> s <span class="token operator">+</span> s2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"zip"</span><span class="token punctuation">,</span> <span class="token string">"accept: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-log"><code class="language-log">08-26 02:42:12.839 4644-4644/com.rxandroid D/zip: accept: 12</code></pre>]]></content>
      
      
      <categories>
          
          <category> rxandroid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> rxandroid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习</title>
      <link href="/2019/08/23/flutter-xue-xi/"/>
      <url>/2019/08/23/flutter-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Text组件"><a href="#1-Text组件" class="headerlink" title="1.    Text组件"></a>1.    Text组件</h3><table><thead><tr><th align="center">名称</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">textAlign</td><td align="center">文本对齐方式（center:居中，left：居左，right:居右，justfy:两端对齐）</td></tr><tr><td align="center">textDirection</td><td align="center">文本方向（ltr：从左到右，rtl:从右到左）</td></tr><tr><td align="center">overflow</td><td align="center">文字超出屏幕之后的处理方式（clip:裁剪，fade:隐藏，ellipsis:省略号）</td></tr><tr><td align="center">textScaleFactor</td><td align="center">文字显示倍率</td></tr><tr><td align="center">maxLines</td><td align="center">文字显示最大行数</td></tr><tr><td align="center">style</td><td align="center">文字的样式设置</td></tr></tbody></table><h4 id="1-1-TextStyle"><a href="#1-1-TextStyle" class="headerlink" title="1.1 TextStyle"></a>1.1 TextStyle</h4><table><thead><tr><th align="center">名称</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">decoration</td><td align="center">文字装饰线（none:没有线，lineThrough：删除线，overline：上划线，underline：下划线）</td></tr><tr><td align="center">decorationColor</td><td align="center">文字装饰线的颜色</td></tr><tr><td align="center">decorationStyle</td><td align="center">文字装饰线风格（[dashed,dotted]）虚线，double两根线，solid一根线，wavy波浪线</td></tr><tr><td align="center">wordSpacing</td><td align="center">单词间隙（如果为负数，会让单词变得更紧凑）</td></tr><tr><td align="center">letterSpacing</td><td align="center">字母间隙（如果是负数，会让字母变得更紧凑）</td></tr><tr><td align="center">fontStyle</td><td align="center">文字样式（italic斜体，normal正常体）</td></tr><tr><td align="center">fontSize</td><td align="center">字体大小</td></tr><tr><td align="center">color</td><td align="center">字体颜色</td></tr><tr><td align="center">fontWeight</td><td align="center">字体粗细（bold粗体，normal正常）</td></tr></tbody></table><h3 id="2-Container组件"><a href="#2-Container组件" class="headerlink" title="2.    Container组件"></a>2.    Container组件</h3><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>alignment</td><td>topCenter：顶部居中对齐；topLeft：顶部左对齐；topRight:顶部右对齐；center：水平垂直居中对齐；centerLeft：垂直居中水平居中对齐；centerRight:垂直居中水平居右对齐；bottomCenter:底部居中对齐；bottomLeft：对不局左对齐；bottomRight：底部居右对齐</td></tr><tr><td>decoration</td><td>BoxDecoration,color,border,borderRadius</td></tr><tr><td>margin</td><td>margin属性表示Container与外部其他组件的距离。EdgeInsets.all()</td></tr><tr><td>padding</td><td>padding是COntainer的内边距，值得是Container边缘与child之间的距离</td></tr><tr><td>transform</td><td>让Container容易进行一些旋转之类的操作；transform:Matrix4.rotationZ(0.2)</td></tr><tr><td>heigth</td><td>Container的高度</td></tr><tr><td>width</td><td>Container宽度</td></tr><tr><td>child</td><td>Container 子元素</td></tr></tbody></table><h3 id="3-图像组件"><a href="#3-图像组件" class="headerlink" title="3. 图像组件"></a>3. 图像组件</h3><blockquote><p>Image组件有很多构造函数</p><p>Image.asset:本地图片</p><p>Image.network:远程图片</p></blockquote><table><thead><tr><th align="center">名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">alignment</td><td align="center">Alignment</td><td align="center">图片对齐方式</td></tr><tr><td align="center">color&amp;colorBlendMode</td><td align="center"></td><td align="center">设置图片的背景颜色，通常和colorBlendMode配合一直使用，这样可以使图片的颜色和背景色混合。</td></tr><tr><td align="center">fit</td><td align="center">BoxFit</td><td align="center">fit属性用来控制图片的拉伸和挤压，这都是根据父容器来的。BoxFit.fill:全图显示，图片会被拉伸，并充满父容器；BoxFit.contain:全图显示，显示原比例，可能会有空隙；BoxFit.cover:显示可拉伸，可能裁切，充满（图片要充满整个容器，还不变形）;BoxFir.fitWidth:宽度充满（横向充满），显示可能拉伸，可能裁切；BoxFit.fitHeight:高度充满（竖向充满），显示可能拉伸，可能裁切；BoxFit.scaleDown:效果和contain差不多，但是此属性不允许显示超过原图片大小，可小不可大</td></tr><tr><td align="center">repeat</td><td align="center">平铺</td><td align="center">ImageRepeat.repeat:横向和纵向都进行重复，直到铺满整个画布；ImageRepeat.repeatX:横向重复，纵向不重复；ImageRepeat.repeatY:纵向重复，横向不重复</td></tr><tr><td align="center">width</td><td align="center"></td><td align="center">宽度  一般结合ClipOval 才能看效果</td></tr><tr><td align="center">height</td><td align="center"></td><td align="center">高度 一般结合ClipOval 才能看到效果</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基本使用</title>
      <link href="/2019/08/23/typora-ji-ben-shi-yong/"/>
      <url>/2019/08/23/typora-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><code>Ctrl 0</code>到 <code>Ctrl4</code> : 普通文本一级~四级标题</p><p><code>Ctrl B</code> :加粗</p><p><strong>我是加粗的文字</strong></p><p><code>Ctrl I</code> :斜体</p><p><em>我是斜体的文字</em></p><p><code>Ctrl U</code> :下划线</p><p><u>我是带下划线的文字</u></p><p><code>Ctrl K</code>:超链接</p><p><a href www.baidu.com"">我是超链接</a></p><p><code>Ctrl T</code>:表格</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><code>shift+ctrl+Q</code>:引用</p><blockquote><p>我是引用的一段话</p></blockquote><p><code>shift+ctrl+I</code>:插入图片</p><p><img src="https://www.baidu.com/img/baidu_jgylogo3.gif" alt="baidu"></p><p>三个飘号：代码块</p><pre class=" language-javascript"><code class="language-javascript">我是代码块</code></pre><p>有序，无序列表：<code>*</code>，<code>+</code>，<code>-</code>，按<code>tab</code>键可以切换二级列表</p><ul><li>一级列表1</li><li>一级列表2<ul><li>二级列表1</li><li>二级列表2</li></ul></li></ul><p>上标：<code>^上标^</code></p><p>​    2^2^</p><p>下标：<code>~下标~</code></p><p>​    H<del>2</del>O</p><p>高亮：<code>==高亮字==</code></p><p>​    ==我是高亮的字==</p><p>分割线：<code>---</code></p><hr><p>emoji图片：<code>:</code></p><p>​    :arrow_up:</p><p>目录生成：<code>[toc]</code></p><p>[TOC]</p><p>流程图：<code>Flowchart</code>，<code>Mermaid</code></p><ul><li><p>流程图：Flowchart</p><pre class=" language-flow"><code class="language-flow"></code></pre></li></ul><ul><li><p>流程图：Mermaid</p><pre class=" language-mermaid"><code class="language-mermaid"></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
